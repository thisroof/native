// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using MvvmCross.Binding.BindingContext;
using MapKit;
using CoreLocation;
using ThisRoofN.Helpers;

namespace ThisRoofN.iOS
{
	public partial class SearchResultDetailMapView : BaseViewController, IMKMapViewDelegate
	{
		public SearchResultDetailMapView (IntPtr handle) : base (handle)
		{
			
		}

		public SearchResultDetailMapViewModel ViewModelInstance
		{
			get {
				return base.ViewModel as SearchResultDetailMapViewModel;
			}
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			// Bind Values
			var bindingSet = this.CreateBindingSet<SearchResultDetailMapView, SearchResultDetailMapViewModel> ();
			bindingSet.Bind (btn_back).To (vm => vm.CloseCommand);
			bindingSet.Bind (lbl_title).To (vm => vm.Address);
			bindingSet.Apply ();

			InitPropertyMap ();
			InitMapTypeButtons ();
		}

		private void InitPropertyMap()
		{
			map_property.Layer.CornerRadius = 10.0f;
			map_property.Delegate = this;
			map_property.SetRegion(new MKCoordinateRegion(
				new CLLocationCoordinate2D(
					ViewModelInstance.Latitude, 
					ViewModelInstance.Longitude),
				new MKCoordinateSpan(
					LocationHelper.KilometersToLatitudeDegrees(2),
					LocationHelper.KilometersToLongitudeDegrees(2, ViewModelInstance.Latitude)
				)), false);
			map_property.AddAnnotation (new TRMapAnnotation(null, null, null, new CLLocationCoordinate2D(ViewModelInstance.Latitude, ViewModelInstance.Longitude)));
		}

		private void InitMapTypeButtons()
		{
			btn_satellite.SetTitleColor(UIColor.White.ColorWithAlpha (0.4f), UIControlState.Normal);
			btn_hybrid.SetTitleColor(UIColor.White.ColorWithAlpha (0.4f), UIControlState.Normal);
			btn_street.SetTitleColor(UIColor.White, UIControlState.Normal);

			btn_satellite.TouchUpInside += (object sender, EventArgs e) => {
				btn_street.SetTitleColor(UIColor.White.ColorWithAlpha (0.4f), UIControlState.Normal);
				btn_hybrid.SetTitleColor(UIColor.White.ColorWithAlpha (0.4f), UIControlState.Normal);
				btn_satellite.SetTitleColor(UIColor.White, UIControlState.Normal);

				map_property.MapType = MKMapType.Satellite;
			};

			btn_hybrid.TouchUpInside += (object sender, EventArgs e) => {
				btn_satellite.SetTitleColor(UIColor.White.ColorWithAlpha (0.4f), UIControlState.Normal);
				btn_street.SetTitleColor(UIColor.White.ColorWithAlpha (0.4f), UIControlState.Normal);
				btn_hybrid.SetTitleColor(UIColor.White, UIControlState.Normal);

				map_property.MapType = MKMapType.Hybrid;
			};

			btn_street.TouchUpInside += (object sender, EventArgs e) => {
				btn_satellite.SetTitleColor(UIColor.White.ColorWithAlpha (0.4f), UIControlState.Normal);
				btn_hybrid.SetTitleColor(UIColor.White.ColorWithAlpha (0.4f), UIControlState.Normal);
				btn_street.SetTitleColor(UIColor.White, UIControlState.Normal);

				map_property.MapType = MKMapType.Standard;
			};
		}

		[Export ("mapView:viewForAnnotation:")]
		public MapKit.MKAnnotationView GetViewForAnnotation (MapKit.MKMapView mapView, MapKit.IMKAnnotation annotation)
		{
			MKAnnotationView annotationView = mapView.DequeueReusableAnnotation (TRMapAnnotation.Identifier);

			if (annotationView == null) {
				annotationView = new MKAnnotationView (annotation, TRMapAnnotation.Identifier);
				annotationView.Image = UIImage.FromBundle ("icon_custom_pin.png");
			} else {
				annotationView.Annotation = annotation;
			}

			annotationView.CanShowCallout = false;

			return annotationView;
		}
	}
}
