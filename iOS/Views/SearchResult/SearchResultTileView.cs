// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using MvvmCross.Binding.iOS.Views;
using MvvmCross.Binding.BindingContext;
using ThisRoofN.ViewModels;
using CoreGraphics;
using ThisRoofN.Helpers;
using CoreAnimation;

namespace ThisRoofN.iOS
{
	public partial class SearchResultTileView : BaseViewController,  IUICollectionViewDelegateFlowLayout, IUICollectionViewDelegate
	{
		private bool _isLoading;
//		private NSObject orientationObserver;
		public UIActivityIndicatorView spinner;

		public SearchResultTileView (IntPtr handle) : base (handle)
		{
		}

		public SearchResultTileViewModel ViewModelInstance {
			get {
				return (SearchResultTileViewModel)this.ViewModel;
			}
		}

		public bool IsLoading {
			get {
				return _isLoading;
			}
			set {
				_isLoading = value;
				if (value) {
					spinner.StartAnimating ();
				} else {
					spinner.StopAnimating ();
				}
				cv_results.ReloadData ();
			}
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			var propertyTypeSource = new TileCollectionViewSource (this, cv_results, new NSString ("SRTileImageCell"));

			cv_results.AllowsSelection = true;
			cv_results.Source = propertyTypeSource;
			cv_results.Delegate = this;
			cv_results.AlwaysBounceVertical = true;

			nfloat width = 0.0f;
			if (UIDevice.CurrentDevice.Orientation == UIDeviceOrientation.LandscapeLeft || UIDevice.CurrentDevice.Orientation == UIDeviceOrientation.LandscapeRight) {
				width = (UIScreen.MainScreen.Bounds.Width - 8) / 5;
			} else {
				if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Phone) {
					width = (UIScreen.MainScreen.Bounds.Width - 4) / 3;
				} else {
					width = (UIScreen.MainScreen.Bounds.Width - 6) / 3;
				}
			}
			 
			((UICollectionViewFlowLayout)cv_results.CollectionViewLayout).MinimumInteritemSpacing = 2.0f;
			((UICollectionViewFlowLayout)cv_results.CollectionViewLayout).MinimumLineSpacing = 2.0f;
			((UICollectionViewFlowLayout)cv_results.CollectionViewLayout).ItemSize = new CGSize (width, width);

			var bindingSet = this.CreateBindingSet<SearchResultTileView, SearchResultTileViewModel> ();
			bindingSet.Bind (propertyTypeSource).To (vm => vm.TileItems);
			bindingSet.Bind (loadingView).For (i => i.Hidden).To (vm => vm.IsHideLoading);
			bindingSet.Bind (this).For (i => i.IsLoading).To (vm => vm.SpinnerLoading);
			bindingSet.Bind (loadingLabel).To (vm => vm.LoadingText);
			bindingSet.Apply ();

//			UIDevice.CurrentDevice.BeginGeneratingDeviceOrientationNotifications ();
//			this.orientationObserver = UIDevice.Notifications.ObserveOrientationDidChange ((s, e) => {
//				
//			});
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

//			if (this.orientationObserver != null) {
//				NSNotificationCenter.DefaultCenter.RemoveObserver (this.orientationObserver);
//			}
//
//			UIDevice.CurrentDevice.EndGeneratingDeviceOrientationNotifications ();
		}

		public override void ViewWillLayoutSubviews ()
		{
			base.ViewWillLayoutSubviews ();

			nfloat width = 0.0f;
			if (UIDevice.CurrentDevice.Orientation == UIDeviceOrientation.LandscapeLeft || UIDevice.CurrentDevice.Orientation == UIDeviceOrientation.LandscapeRight) {
				width = (UIScreen.MainScreen.Bounds.Width - 8) / 5;
			} else if(UIDevice.CurrentDevice.Orientation == UIDeviceOrientation.Portrait || UIDevice.CurrentDevice.Orientation == UIDeviceOrientation.PortraitUpsideDown){
				if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Phone) {
					width = (UIScreen.MainScreen.Bounds.Width - 4) / 3;
				} else {
					width = (UIScreen.MainScreen.Bounds.Width - 6) / 3;
				}
			}

			((UICollectionViewFlowLayout)cv_results.CollectionViewLayout).ItemSize = new CGSize (width, width);

			if (spinner != null) {
				spinner.Frame = new CGRect (0, 0, UIScreen.MainScreen.Bounds.Width, 44);
			}
		}

		public void ReloadData ()
		{
			cv_results.ReloadData ();
		}

		[Export ("collectionView:didSelectItemAtIndexPath:")]
		public void ItemSelected (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath)
		{
			ViewModelInstance.DetailCommand.Execute (indexPath.Row);
		}

		[Export ("collectionView:layout:referenceSizeForFooterInSection:")]
		public CoreGraphics.CGSize GetReferenceSizeForFooter (UIKit.UICollectionView collectionView, UIKit.UICollectionViewLayout layout, System.nint section)
		{
			if (spinner.IsAnimating) {
				return new CGSize (UIScreen.MainScreen.Bounds.Width, 44.0f);
			} else {
				return new CGSize (UIScreen.MainScreen.Bounds.Width, 2.0f);
			}

		}

		[Export ("scrollViewDidEndDragging:willDecelerate:")]
		public void DraggingEnded (UIKit.UIScrollView scrollView, bool willDecelerate)
		{
			CGPoint offset = cv_results.ContentOffset;
			CGRect bounds = cv_results.Bounds;
			CGSize size = cv_results.ContentSize;
			UIEdgeInsets inset = cv_results.ContentInset;
			nfloat y = offset.Y + bounds.Size.Height - inset.Bottom;
			nfloat h = size.Height;

			float reload_distance = 50;

			if (y > h + reload_distance) {
				ViewModelInstance.LoadMoreCommand.Execute (null);
			}
		}

		public class TileCollectionViewSource : MvxCollectionViewSource
		{
			private SearchResultTileView masterViewInstance;

			public TileCollectionViewSource (SearchResultTileView masterView, UICollectionView cv, NSString reuseIdentifier) : base (cv, reuseIdentifier)
			{
				masterViewInstance = masterView;
				masterView.spinner = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.Gray);
				masterView.spinner.StopAnimating ();
				masterView.spinner.HidesWhenStopped = false;
				masterView.spinner.Frame = new CGRect (0, 0, UIScreen.MainScreen.Bounds.Width, 44);
			}

			public override UICollectionReusableView GetViewForSupplementaryElement (UICollectionView collectionView, NSString elementKind, NSIndexPath indexPath)
			{
				Console.WriteLine (elementKind);
				UICollectionReusableView footerview = collectionView.DequeueReusableSupplementaryView (UICollectionElementKindSection.Footer, "SRTileFooter", indexPath);
				if (DataHelper.TotalLoadedCount >= 24) {
					footerview.Add (masterViewInstance.spinner);
				}

				footerview.ClipsToBounds = false;
				return footerview;
			}

			protected override UICollectionViewCell GetOrCreateCellFor (UICollectionView collectionView, NSIndexPath indexPath, object item)
			{
				SRTileImageCell cell = (SRTileImageCell)base.GetOrCreateCellFor (collectionView, indexPath, item);
				cell.IVItem.ContentMode = UIViewContentMode.ScaleAspectFill;
				cell.IVItem.DefaultImagePath = NSBundle.MainBundle.PathForResource ("img_placeholder_small", "png");

				CAGradientLayer gradLayer = GradientHelper.TileCellGradient;
				gradLayer.Frame = cell.ViewTitleBack.Bounds;

				if (cell.ViewTitleBack.Layer.Sublayers.Length > 1) {
					cell.ViewTitleBack.Layer.Sublayers [0].RemoveFromSuperLayer ();
				}
				cell.ViewTitleBack.Layer.InsertSublayer (gradLayer, 0);

				return cell;
			}
		}
	}
}
