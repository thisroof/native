// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using ThisRoofN.ViewModels;
using MvvmCross.Core.ViewModels;
using MvvmCross.iOS.Views;
using CoreGraphics;
using ThisRoofN.iOS.Helpers;
using MvvmCross.Binding.BindingContext;

namespace ThisRoofN.iOS.Views
{
	public partial class SearchResultHomeView : BaseViewController
	{
		private UIViewController tileVC;
		private UIViewController listVC;
		private UIViewController mapVC;
		private int _curPage;

		public SearchResultHomeView (IntPtr handle) : base (handle)
		{
		}

		public SearchResultHomeView () : base ()
		{
		}

		public int CurPage {
			get {
				return _curPage;
			}
			set {
				if (_curPage != value) {
					if (btn_list != null) {
						switch (value) {
						case 0:
							icon_tile.Alpha = 1.0f;
							icon_list.Alpha = 0.4f;
							icon_map.Alpha = 0.4f;
							break;
						case 1:
							icon_tile.Alpha = 0.4f;
							icon_list.Alpha = 1.0f;
							icon_map.Alpha = 0.4f;
							break;
						case 2:
							icon_tile.Alpha = 0.4f;
							icon_list.Alpha = 0.4f;
							icon_map.Alpha = 1.0f;
							((SearchResultMapView)mapVC).AddAnnotation (); // for the load more
							break;
						}
					}

					page_scroll.SetContentOffset (new CGPoint ((value * UIScreen.MainScreen.Bounds.Width), 0), true);
					_curPage = value;
				}
			}
		}

		public SearchResultHomeViewModel ViewModelInstance {
			get {
				return (SearchResultHomeViewModel)ViewModel;
			}
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			SetupNavigationBar ();

			page_scroll.ShowsHorizontalScrollIndicator = false;
			page_scroll.ShowsVerticalScrollIndicator = false;
			page_scroll.Bounces = false;
			page_scroll.PagingEnabled = true;

			icon_tile.Alpha = 1.0f;
			icon_list.Alpha = 0.4f;
			icon_map.Alpha = 0.4f;

			tileVC = CreatePage (ViewModelInstance.TileViewModel);
			listVC = CreatePage (ViewModelInstance.ListViewModel);
			mapVC = CreatePage (ViewModelInstance.MapViewModel);

			page_scroll.AddSubview (tileVC.View);
			page_scroll.AddSubview (listVC.View);
			page_scroll.AddSubview (mapVC.View);

			btn_tile.TouchUpInside += (object sender, EventArgs e) => {
				CurPage = 0;
			};

			btn_list.TouchUpInside += (object sender, EventArgs e) => {
				CurPage = 1;
			};

			btn_map.TouchUpInside += (object sender, EventArgs e) => {
				CurPage = 2;
			};

//			SetSearchResultToolbar ();

			var bindingSet = this.CreateBindingSet<SearchResultHomeView, SearchResultHomeViewModel> ();
			bindingSet.Bind (backButton).To (vm => vm.CloseCommand);
			bindingSet.Bind (settingButton).To (vm => vm.SettingCommand);
			bindingSet.Apply ();
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			((SearchResultTileView)tileVC).ReloadData ();
			((SearchResultMapView)mapVC).AddAnnotation ();

			page_scroll.SetContentOffset (new CGPoint ((CurPage * UIScreen.MainScreen.Bounds.Width), 0), false);
			this.NavigationController.SetNavigationBarHidden (false, true);
		}

		public override void ViewDidLayoutSubviews ()
		{
			base.ViewDidLayoutSubviews ();
			tileVC.View.Frame = new CGRect (0, 0, page_scroll.Frame.Width, page_scroll.Frame.Height);
			listVC.View.Frame = new CGRect (page_scroll.Frame.Width, 0, page_scroll.Frame.Width, page_scroll.Frame.Height);
			mapVC.View.Frame = new CGRect (page_scroll.Frame.Width * 2, 0, page_scroll.Frame.Width, page_scroll.Frame.Height);
		}

		private UIViewController CreatePage (IMvxViewModel viewModel)
		{
			var screen = this.CreateViewControllerFor (viewModel) as UIViewController;
			return screen;
		}
	}
}
