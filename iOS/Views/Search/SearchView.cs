// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using RangeSlider;
using ThisRoofN.ViewModels;
using CoreGraphics;
using MvvmCross.Binding.BindingContext;
using AllianceCustomPicker;
using System.Linq;
using MvvmCross.Binding.iOS.Views;

namespace ThisRoofN.iOS
{
	public partial class SearchView : BaseViewController, IUICollectionViewDelegateFlowLayout, IUICollectionViewDelegate
	{
		public SearchCVHeader cvHeader;
		public MvxFluentBindingDescriptionSet<SearchView, SearchViewModel> BindingSet;

		public SearchView (IntPtr handle) : base (handle)
		{
		}

		public SearchViewModel ViewModelInstance {
			get {
				return (SearchViewModel)base.ViewModel;
			}
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			SetupNavigationBar ();

			btn_viewResult.Layer.BorderWidth = 1.0f;
			btn_viewResult.Layer.BorderColor = UIColor.LightGray.CGColor;

			var searchItemSource = new SearchItemSource (this, cv_search, new NSString ("SearchCVCell"));
			cv_search.AllowsSelection = true;
			cv_search.Source = searchItemSource;
			cv_search.Delegate = this;
			((UICollectionViewFlowLayout)cv_search.CollectionViewLayout).MinimumInteritemSpacing = 2.0f;
			((UICollectionViewFlowLayout)cv_search.CollectionViewLayout).MinimumLineSpacing = 2.0f;

			BindingSet = this.CreateBindingSet<SearchView, SearchViewModel> ();
			var bindingSet = this.CreateBindingSet<SearchView, SearchViewModel> ();
			bindingSet.Bind (loadingView).For(i => i.Hidden).To (vm => vm.IsHideLoading);
			bindingSet.Bind (loadingLabel).To (vm => vm.LoadingText);
			bindingSet.Bind (backButton).To (vm => vm.CloseCommand);
			bindingSet.Bind (settingButton).To (vm => vm.SettingCommand);
			bindingSet.Bind (btn_viewResult).To (vm => vm.SearchCommand);
			bindingSet.Bind (searchItemSource).To (vm => vm.SearchItems);
			bindingSet.Apply ();
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			this.NavigationController.SetNavigationBarHidden (false, true);
			this.NavigationController.SetToolbarHidden (true, true);
		}

		public override void ViewWillLayoutSubviews ()
		{
			base.ViewWillLayoutSubviews ();

			if (cv_search != null) {
				nfloat width = 0.0f;

				if (UIDevice.CurrentDevice.Orientation == UIDeviceOrientation.LandscapeLeft || UIDevice.CurrentDevice.Orientation == UIDeviceOrientation.LandscapeRight) {
					width = (UIScreen.MainScreen.Bounds.Width - 4) / 3;
				} else if(UIDevice.CurrentDevice.Orientation == UIDeviceOrientation.Portrait || UIDevice.CurrentDevice.Orientation == UIDeviceOrientation.PortraitUpsideDown){
					if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Phone) {
						width = (UIScreen.MainScreen.Bounds.Width - 2) / 2;
					} else {
						width = (UIScreen.MainScreen.Bounds.Width - 4) / 2;
					}
				}

				((UICollectionViewFlowLayout)cv_search.CollectionViewLayout).ItemSize = new CGSize (width, width);

				if (cvHeader != null) {
					cvHeader.PriceRangeSlider.Frame = new CGRect (0, 0, UIScreen.MainScreen.Bounds.Width - 32, cvHeader.PriceRangeView.Frame.Height);
				}
			}
		}

		[Export ("collectionView:didSelectItemAtIndexPath:")]
		public void ItemSelected (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath)
		{
			ViewModelInstance.GotoModalCommand.Execute (ViewModelInstance.SearchItems[indexPath.Row]);
		}

		public class SearchItemSource : MvxCollectionViewSource
		{
			public SearchView masterInstance;

			public SearchItemSource (SearchView masterView, UICollectionView cv, NSString reuseIdentifier) : base (cv, reuseIdentifier)
			{
				this.masterInstance = masterView;
			}

			public override UICollectionReusableView GetViewForSupplementaryElement (UICollectionView collectionView, NSString elementKind, NSIndexPath indexPath)
			{
				masterInstance.cvHeader = (SearchCVHeader)collectionView.DequeueReusableSupplementaryView (UICollectionElementKindSection.Header, "SearchCVHeader", indexPath);
				masterInstance.cvHeader.InitView (masterInstance);
				return masterInstance.cvHeader;
			}

			protected override UICollectionViewCell GetOrCreateCellFor (UICollectionView collectionView, NSIndexPath indexPath, object item)
			{
				SearchCVCell cell = (SearchCVCell)base.GetOrCreateCellFor (collectionView, indexPath, item);
				cell.InitCell ((ThisRoofN.ViewModels.SearchViewModel.ModalType)item);
				return cell;
			}
		}
	}
}
