// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using MvvmCross.Binding.iOS.Views;
using MvvmCross.Binding.BindingContext;
using CoreGraphics;
using ThisRoofN.ViewModels;

namespace ThisRoofN.iOS
{
	public partial class SearchResultStatesView : BaseViewController
	{
		private bool _isLoading;
		public UIActivityIndicatorView spinner;

		public MvxFluentBindingDescriptionSet<SearchResultStatesView, SearchResultStatesViewModel> BindingSet;

		public SearchResultStatesViewModel ViewModelInstance 
		{
			get {
				return (SearchResultStatesViewModel)base.ViewModel;
			}
		}

		public bool IsLoading {
			get {
				return _isLoading;
			}
			set {
				if (_isLoading == value) {
					return;
				}
				_isLoading = value;
				if (value) {
					spinner.StartAnimating ();
					tbl_states.TableFooterView = spinner;
				} else {
					spinner.StopAnimating ();
					tbl_states.TableFooterView = null;
				}
			}
		}

		public SearchResultStatesView (IntPtr handle) : base (handle)
		{
			
		}
			
		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			SetupNavigationBar ();

			// Bind Locatin Suggesion Table
			var listSource = new SearchResultStatesTableViewSource (this, tbl_states);
			tbl_states.Source = listSource;
			tbl_states.AllowsSelection = false;
			tbl_states.RowHeight = UITableView.AutomaticDimension;

			spinner = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.Gray);
			spinner.HidesWhenStopped = true;
			spinner.StopAnimating ();
			spinner.Frame = new CGRect (0, 0, UIScreen.MainScreen.Bounds.Width, 44);
			//tbl_states.TableFooterView = new UITableView(CGRect.Empty);
			//tbl_states.ReloadData ();
			tbl_states.SeparatorStyle = UITableViewCellSeparatorStyle.None;

			BindingSet = this.CreateBindingSet<SearchResultStatesView, SearchResultStatesViewModel> ();
			BindingSet.Bind (listSource).To (vm => vm.ListItems);
			BindingSet.Bind (loadingView).For(i => i.Hidden).To (vm => vm.IsHideLoading);
			BindingSet.Bind (loadingLabel).To (vm => vm.LoadingText);
			BindingSet.Bind (this).For (i => i.IsLoading).To (vm => vm.SpinnerLoading);
			BindingSet.Bind (backButton).To (vm => vm.CloseCommand);
			BindingSet.Bind (settingButton).To (vm => vm.SettingCommand);
			BindingSet.Apply ();

			ViewModelInstance.PropertyChanged += ViewModelInstance_PropertyChanged;
		}

		void ViewModelInstance_PropertyChanged (object sender, System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (e.PropertyName == "ListItems") {
				tbl_states.ReloadData ();
			}
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
			// SetupNavigationBar ();

			this.NavigationController.SetNavigationBarHidden (false, true);
		}

		public class SearchResultStatesTableViewSource : MvxTableViewSource
		{
			SearchResultStatesView masterView;

			public SearchResultStatesTableViewSource (SearchResultStatesView _masterview, UITableView tv) : base (tv)
			{
				masterView = _masterview;
			}

			public override nfloat GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
			{
				return 300.0f;
			}

			public override void DraggingEnded (UIScrollView scrollView, bool willDecelerate)
			{
				CGPoint offset = scrollView.ContentOffset;
				CGRect bounds = scrollView.Bounds;
				CGSize size = scrollView.ContentSize;
				UIEdgeInsets inset = scrollView.ContentInset;
				nfloat y = offset.Y + bounds.Size.Height - inset.Bottom;
				nfloat h = size.Height;

				float reload_distance = 50;

				if (y > h + reload_distance) {
					masterView.ViewModelInstance.LoadMoreCommand.Execute (null);
				}
			}

			protected override UITableViewCell GetOrCreateCellFor (UITableView tableView, NSIndexPath indexPath, object item)
			{
				SearchResultStatesViewCell cell = (SearchResultStatesViewCell)tableView.DequeueReusableCell (SearchResultStatesViewCell.Identifier);

				if (cell.ShowAllForState == null) {
					cell.ShowAllForState += HandleShowAll;
				}
				if (cell.GoToDetail == null) {
					cell.GoToDetail += HandleGoToDetail;
				}
				cell.SetNeedsLayout ();
				cell.SetNeedsDisplay ();
				return cell;
			}

			public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
			{
				tableView.DeselectRow (indexPath, true);

			}

			private void HandleShowAll (object sender, ShowAllForStateEventArgs e) {
				if (e.StateResult != null) {
					masterView.ViewModelInstance.ShowAllCommand.Execute (e.StateResult);
				}
			}

			private void HandleGoToDetail (object sender, GoToDetailEventArgs e) {
				if (e.Cottage != null) {
					masterView.ViewModelInstance.DetailItemCommand.Execute (e.Cottage);
				}
			}
		}
	}
}
