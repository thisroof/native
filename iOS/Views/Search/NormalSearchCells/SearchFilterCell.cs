// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using MvvmCross.Binding.iOS.Views;
using CoreGraphics;

namespace ThisRoofN.iOS
{
	public partial class SearchFilterCell : UITableViewCell, ISearchCell, IUICollectionViewDelegateFlowLayout, IUICollectionViewDelegate
	{
		public static string Identifier = "SearchFilterCell";
		private NormalSearchViewController masterView;
		private nfloat cellHeight;
		private bool expanded;

		public SearchFilterCell (IntPtr handle) : base (handle)
		{
		}

		public nfloat CellHeight 
		{
			get
			{
				return cellHeight;
			}
		}

		public void BindData(NormalSearchViewController _masterView)
		{
			this.masterView = _masterView;

			InitUI ();

			var propertyTypeSource = new MvxCollectionViewSource (cv_viewTypes, new NSString("FilterCheckboxCVCell"));

			cv_viewTypes.AllowsSelection = true;
			cv_viewTypes.Source = propertyTypeSource;
			cv_viewTypes.Delegate = this;

			_masterView.BindingSet.Bind (propertyTypeSource).To (vm => vm.ViewTypes);
		}

		public void HandleExpandTap()
		{
			expanded = !expanded;

			masterView.MasterTableView.BeginUpdates ();
			if (expanded) {
				img_expandMarker.Image = UIImage.FromBundle ("icon_arrow_blue_down");
				cellHeight = cv_viewTypes.Frame.Bottom + 8;
			} else {
				img_expandMarker.Image = UIImage.FromBundle ("icon_arrow_blue_right");
				cellHeight = view_cellTitle.Frame.Bottom;
			}
			masterView.MasterTableView.EndUpdates ();
		}

		private void InitUI() {
			cellHeight = view_cellTitle.Frame.Bottom;
			UITapGestureRecognizer expandTap = new UITapGestureRecognizer (HandleExpandTap);
			view_cellTitle.UserInteractionEnabled = true;
			view_cellTitle.RemoveGestureRecognizer (expandTap);
			view_cellTitle.AddGestureRecognizer (expandTap);
		}

		// UICollectionView Delegate
		[Export ("collectionView:layout:sizeForItemAtIndexPath:")]
		public CoreGraphics.CGSize GetSizeForItem (UIKit.UICollectionView collectionView, UIKit.UICollectionViewLayout layout, Foundation.NSIndexPath indexPath)
		{
			return new CGSize ((collectionView.Frame.Width - 32) / 3, 20);
		}

		[Export ("collectionView:layout:minimumInteritemSpacingForSectionAtIndex:")]
		public System.nfloat GetMinimumInteritemSpacingForSection (UIKit.UICollectionView collectionView, UIKit.UICollectionViewLayout layout, System.nint section)
		{
			return 8.0f;
		}

		[Export ("collectionView:didSelectItemAtIndexPath:")]
		public void ItemSelected (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath)
		{
			masterView.ViewModelInstance.ViewTypes [indexPath.Row].Selected = !masterView.ViewModelInstance.ViewTypes [indexPath.Row].Selected;
		}
	}
}
