// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using MvvmCross.Binding.iOS.Views;
using MvvmCross.Binding.BindingContext;
using CoreAnimation;
using CoreGraphics;
using ThisRoofN.Models.App;

namespace ThisRoofN.iOS
{
	public partial class SearchResultStatesViewCell : MvxTableViewCell, IUICollectionViewDelegate
	{
		public static string Identifier = "SearchResultStatesViewCell";
		public EventHandler<ShowAllForStateEventArgs> ShowAllForState;
		public EventHandler<GoToDetailEventArgs> GoToDetail;

		public MvxImageView IVItem {
			get {
				return img_state;
			}
		}

		public UIButton showAllButton {
			get {
				return btn_showall;
			}
		}

		public SearchResultStatesViewCell (IntPtr handle) : base (handle)
		{

			this.DelayBind (() => {
				var resultsSource = new StateResultCollectionViewSource (this, cv_results, new NSString("SRTileImageCell"));
				cv_results.AllowsSelection = true;
				cv_results.RegisterNibForCell (SRTileImageCell.Nib, new NSString("SRTileImageCell"));
				((UICollectionViewFlowLayout)cv_results.CollectionViewLayout).MinimumInteritemSpacing = 0.0f;
				((UICollectionViewFlowLayout)cv_results.CollectionViewLayout).MinimumLineSpacing = 0.0f;
				((UICollectionViewFlowLayout)cv_results.CollectionViewLayout).ItemSize = new CGSize (80, 80);
				cv_results.Source = resultsSource;
				cv_results.Delegate = this;

				showAllButton.SetTitleColor (UIColor.White, UIControlState.Normal);
				showAllButton.Layer.BorderColor = UIColor.White.CGColor;
				showAllButton.Layer.BorderWidth = 1.5f;
				img_state.ContentMode = UIViewContentMode.ScaleAspectFill;
				img_state.DefaultImagePath = NSBundle.MainBundle.PathForResource ("img_placeholder_small", "png");

				var set = this.CreateBindingSet<SearchResultStatesViewCell, TRStateResult>();
				set.Bind(lbl_state).To(vm => vm.Title);
				set.Bind(img_state).For(i => i.ImageUrl).To(vm => vm.PhotoLink);
				set.Bind(resultsSource).To(vm => vm.Cottages);
				set.Apply(); 

				btn_showall.TouchUpInside += Showall_TouchUpInside;
			}); 
		}

		void Showall_TouchUpInside (object sender, EventArgs e)
		{
			if (ShowAllForState != null) {
				ShowAllForState.Invoke (this, new ShowAllForStateEventArgs ((NWSearchResult)this.BindingContext.DataContext));
			}
		}

		[Export ("collectionView:didSelectItemAtIndexPath:")]
		public void ItemSelected (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath)
		{
			if (GoToDetail != null) {
				GoToDetail.Invoke (this, new GoToDetailEventArgs (((NWSearchResult)this.BindingContext.DataContext).Cottages[indexPath.Row]));
			}
		}

		public class StateResultCollectionViewSource : MvxCollectionViewSource
		{
			SearchResultStatesViewCell masterView;

			public StateResultCollectionViewSource (SearchResultStatesViewCell _masterview, UICollectionView cv, NSString reuseIdentifier) : base (cv, reuseIdentifier)
			{
				masterView = _masterview;
			}

			protected override UICollectionViewCell GetOrCreateCellFor (UICollectionView collectionView, NSIndexPath indexPath, object item)
			{
				SRTileImageCell cell = (SRTileImageCell)base.GetOrCreateCellFor (collectionView, indexPath, item);
				cell.IVItem.ContentMode = UIViewContentMode.ScaleAspectFill;
				cell.IVItem.DefaultImagePath = NSBundle.MainBundle.PathForResource ("img_placeholder_small", "png");

				CAGradientLayer gradLayer = GradientHelper.TileCellGradient;
				gradLayer.Frame = cell.ViewTitleBack.Bounds;

				if (cell.ViewTitleBack.Layer.Sublayers.Length > 2) {
					cell.ViewTitleBack.Layer.Sublayers [0].RemoveFromSuperLayer ();
				}
				cell.ViewTitleBack.Layer.InsertSublayer (gradLayer, 0);

				if (indexPath.Row < (this.GetItemsCount(collectionView, indexPath.Section) - 1)) {
					CALayer borderLayer = new CALayer();
					borderLayer.BorderColor = UIColor.White.CGColor;
					borderLayer.BorderWidth = 2;
					borderLayer.Frame = new CGRect (-2, -2, cell.Frame.Width + 2, cell.Frame.Height + 4);
					cell.ViewTitleBack.Layer.InsertSublayer (borderLayer, 1);
				}
				return cell;
			}

		}
	}
}
