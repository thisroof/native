// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;

using Foundation;
using UIKit;
using MvvmCross.Binding.iOS.Views;
using CoreGraphics;
using ThisRoofN.ViewModels;
using MvvmCross.Binding.BindingContext;
using ThisRoofN.Models.App;
using ThisRoofN.Models.Service;
using ThisRoofN.iOS.ValueConverters;
using CoreAnimation;
using MapKit;
using CoreLocation;
using ThisRoofN.Helpers;

namespace ThisRoofN.iOS
{
	public partial class SearchResultDetailView : BaseViewController, IMKMapViewDelegate
	{
		public SearchResultDetailView (IntPtr handle) : base (handle)
		{
		}

		public SearchResultDetailViewModel ViewModelInstace {
			get {
				return this.ViewModel as SearchResultDetailViewModel;
			}
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			InitPropertyMap ();

			view_btn_back.Layer.CornerRadius = view_btn_back.Frame.Width / 2;
			view_btn_share.Layer.CornerRadius = view_btn_back.Frame.Width / 2;
			view_btn_like.Layer.CornerRadius = view_btn_back.Frame.Width / 2;
			view_btn_dislike.Layer.CornerRadius = view_btn_back.Frame.Width / 2;
			view_prevImgBack.Layer.CornerRadius = view_prevImgBack.Frame.Width / 2;
			view_nextImgBack.Layer.CornerRadius = view_nextImgBack.Frame.Width / 2;
			view_dislikeSetting.Layer.CornerRadius = 5.0f;

			img_property.DefaultImagePath = NSBundle.MainBundle.PathForResource ("img_placeholder", "png");

			CAGradientLayer gradLayer = GradientHelper.WhiteGradient;
			gradLayer.Frame = view_infoBack.Bounds;
			view_infoBack.Layer.InsertSublayer (gradLayer, 0);

			// Bind Values
			var bindingSet = this.CreateBindingSet<SearchResultDetailView, SearchResultDetailViewModel> ();
			bindingSet.Bind (btn_back).To (vm => vm.CloseCommand);
			bindingSet.Bind (btn_like).To (vm => vm.LikeCommand);
			bindingSet.Bind (btn_dislike).To (vm => vm.DisLikeCommand);
			bindingSet.Bind (iv_btn_like).To (vm => vm.Liked).WithConversion(new LikemarkConverter());
			bindingSet.Bind (iv_btn_dislike).To (vm => vm.Disliked).WithConversion(new DislikemarkConverter());
			bindingSet.Bind (btn_prevProperty).To (vm => vm.NextPropertyCommand).CommandParameter(false);
			bindingSet.Bind (btn_nextProperty).To (vm => vm.NextPropertyCommand).CommandParameter(true);
			bindingSet.Bind (btn_prevImage).To (vm => vm.NextImageCommand).CommandParameter(false);
			bindingSet.Bind (btn_nextImage).To (vm => vm.NextImageCommand).CommandParameter(true);
			bindingSet.Bind (btn_goMap).To (vm => vm.GoMapCommand);
			bindingSet.Bind (img_property).To (vm => vm.ImageLink);

			bindingSet.Bind (lbl_price).To (vm => vm.ItemDetail.FormattedPrice);
			bindingSet.Bind (lbl_address).To (vm => vm.ItemDetail.FormattedAddress);
			bindingSet.Bind (lbl_beds).To (vm => vm.ItemDetail.Bedrooms);
			bindingSet.Bind (lbl_baths).To (vm => vm.ItemDetail.Bathrooms);
			bindingSet.Bind (lbl_sqft).To (vm => vm.ItemDetail.LotSquareSize);
			bindingSet.Bind (lbl_description).To (vm => vm.ItemDetail.Description);

			bindingSet.Bind (lbl_status).To (vm => vm.ItemDetail.Sataus);
			bindingSet.Bind (lbl_type).To (vm => vm.ItemDetail.PropertyType);
			bindingSet.Bind (lbl_yearBuilt).To (vm => vm.ItemDetail.YearBuilt);
			bindingSet.Bind (lbl_daysOnMarket).To (vm => vm.ItemDetail.DaysOnMarket);
			bindingSet.Bind (lbl_listedBy).To (vm => vm.ItemDetail.ListedBy);
			bindingSet.Bind (lbl_mlsNumber).To (vm => vm.ItemDetail.MlsNumber);

			bindingSet.Bind (loadingView).For(i => i.Hidden).To (vm => vm.IsHideLoading);
			bindingSet.Bind (loadingLabel).To (vm => vm.LoadingText);

			bindingSet.Bind (view_dislikeSetting).For (i => i.Hidden).To (vm => vm.IsDislikeHidden);
			bindingSet.Bind (btn_commit).To (vm => vm.DisLikeCommand);
			bindingSet.Bind (btn_cancel).To (vm => vm.ShowDislikeViewCommand).CommandParameter (false);

			bindingSet.Bind (icon_tooFar).To (vm => vm.TooFar).WithConversion(new CheckmarkConverter());
			bindingSet.Bind (icon_tooClose).To (vm => vm.TooClose).WithConversion(new CheckmarkConverter());
			bindingSet.Bind (icon_tooSmall).To (vm => vm.TooSmall).WithConversion(new CheckmarkConverter());
			bindingSet.Bind (icon_lotTooSmall).To (vm => vm.LotTooSmall).WithConversion(new CheckmarkConverter());
			bindingSet.Bind (icon_tooBig).To (vm => vm.LotTooBig).WithConversion(new CheckmarkConverter());
			bindingSet.Bind (icon_ugly).To (vm => vm.Ugly).WithConversion(new CheckmarkConverter());
			bindingSet.Apply ();

			icon_tooFar.UserInteractionEnabled = true;
			icon_tooClose.UserInteractionEnabled = true;
			icon_tooSmall.UserInteractionEnabled = true;
			icon_lotTooSmall.UserInteractionEnabled = true;
			icon_tooBig.UserInteractionEnabled = true;
			icon_ugly.UserInteractionEnabled = true;

			icon_tooFar.AddGestureRecognizer (new UITapGestureRecognizer (() => {
				ViewModelInstace.TooFar = !ViewModelInstace.TooFar;
			}));
			icon_tooClose.AddGestureRecognizer (new UITapGestureRecognizer (() => {
				ViewModelInstace.TooClose = !ViewModelInstace.TooClose;
			}));
			icon_tooSmall.AddGestureRecognizer (new UITapGestureRecognizer (() => {
				ViewModelInstace.TooSmall = !ViewModelInstace.TooSmall;
			}));
			icon_lotTooSmall.AddGestureRecognizer (new UITapGestureRecognizer (() => {
				ViewModelInstace.LotTooSmall = !ViewModelInstace.LotTooSmall;
			}));
			icon_tooBig.AddGestureRecognizer (new UITapGestureRecognizer (() => {
				ViewModelInstace.LotTooBig = !ViewModelInstace.LotTooBig;
			}));
			icon_ugly.AddGestureRecognizer (new UITapGestureRecognizer (() => {
				ViewModelInstace.Ugly = !ViewModelInstace.Ugly;
			}));
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			this.NavigationController.SetNavigationBarHidden (true, true);
		}

		public override void ViewWillLayoutSubviews ()
		{
			base.ViewWillLayoutSubviews ();
			view_infoBack.Layer.Sublayers [0].Frame = new CGRect(0, 0, UIScreen.MainScreen.Bounds.Width, view_infoBack.Frame.Height);
		}

		public override void ViewDidLayoutSubviews ()
		{
			base.ViewDidLayoutSubviews ();


		}

		private void InitPropertyMap()
		{
			map_prop.Layer.CornerRadius = 10.0f;
			map_prop.ZoomEnabled = false;
			map_prop.UserInteractionEnabled = false;
			map_prop.Delegate = this;
			map_prop.SetRegion(new MKCoordinateRegion(
				new CLLocationCoordinate2D(36.7783, -119.4179),
				new MKCoordinateSpan(
					LocationHelper.KilometersToLatitudeDegrees(20),
					LocationHelper.KilometersToLongitudeDegrees(20, 36.7783)
				)), false);
			map_prop.AddAnnotation (new TRMapAnnotation(null, null, null, new CLLocationCoordinate2D(36.7783, -119.4179)));
		}

		[Export ("mapView:viewForAnnotation:")]
		public MapKit.MKAnnotationView GetViewForAnnotation (MapKit.MKMapView mapView, MapKit.IMKAnnotation annotation)
		{
			MKAnnotationView annotationView = mapView.DequeueReusableAnnotation (TRMapAnnotation.Identifier);

			if (annotationView == null) {
				annotationView = new MKAnnotationView (annotation, TRMapAnnotation.Identifier);
				annotationView.Image = UIImage.FromBundle ("icon_custom_pin.png");
			} else {
				annotationView.Annotation = annotation;
			}

			annotationView.CanShowCallout = false;

			return annotationView;
		}
	}
}
