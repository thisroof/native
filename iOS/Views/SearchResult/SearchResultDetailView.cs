// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;

using Foundation;
using UIKit;
using MvvmCross.Binding.iOS.Views;
using CoreGraphics;
using ThisRoofN.ViewModels;
using MvvmCross.Binding.BindingContext;

namespace ThisRoofN.iOS
{
	public partial class SearchResultDetailView : BaseViewController
	{
		public MvxFluentBindingDescriptionSet<SearchResultDetailView, SearchResultDetailViewModel> BindingSet;

		public SearchResultDetailView (IntPtr handle) : base (handle)
		{
		}

		public SearchResultDetailViewModel ViewModelInstace
		{
			get {
				return this.ViewModel as SearchResultDetailViewModel;
			}
		}

		public UITableView MasterTableView
		{
			get {
				return tbl_detail;
			}
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			SetupNavigationBar ();

			BindingSet = this.CreateBindingSet<SearchResultDetailView, SearchResultDetailViewModel> ();
			BindingSet.Bind (backButton).To (vm => vm.CloseCommand);
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			this.NavigationController.SetNavigationBarHidden (false, true);
			this.NavigationController.SetToolbarHidden (true, true);
		}

		public override void ViewDidLayoutSubviews ()
		{
			base.ViewDidLayoutSubviews ();

			// we set the source and bind here to get the tableview height, exactly
			var source = new SearchResultDetailTableViewSource (tbl_detail, this);
			tbl_detail.Source = source;
			tbl_detail.RowHeight = UITableView.AutomaticDimension;
			tbl_detail.AllowsSelection = false;
			tbl_detail.TableFooterView = new UITableView (CGRect.Empty);

			BindingSet.Bind (source).To (vm => vm.ItemDetail.Gallery);
			BindingSet.Apply ();
		}

		public class SearchResultDetailTableViewSource : MvxTableViewSource
		{
			SearchResultDetailView masterView;
			SRDetailMapCell mapCell;
			SRDetailTitleCell titleCell;
			SRDetailValueCell valueCell;
			SRDetailDescCell descCell;

			public SearchResultDetailTableViewSource(UITableView tableView, SearchResultDetailView vc):base(tableView) {
				this.masterView = vc;

				mapCell = (SRDetailMapCell)tableView.DequeueReusableCell(SRDetailMapCell.Identifier);
				titleCell = (SRDetailTitleCell)tableView.DequeueReusableCell(SRDetailTitleCell.Identifier);
				valueCell = (SRDetailValueCell)tableView.DequeueReusableCell(SRDetailValueCell.Identifier);
				descCell = (SRDetailDescCell)tableView.DequeueReusableCell(SRDetailDescCell.Identifier);

				mapCell.BindData(masterView);
				titleCell.BindData(masterView);
				valueCell.BindData(masterView);
				descCell.BindData(masterView);

				masterView.BindingSet.Apply();
			}

			public override nint RowsInSection (UITableView tableview, nint section)
			{
				if (ItemsSource == null) {
					return 4;
				} else {
					return ItemsSource.Cast<TileItemModel>().Count () + 4;
				}
			}

			public override nint NumberOfSections (UITableView tableView)
			{
				return 1;
			}

			protected override UITableViewCell GetOrCreateCellFor (UITableView tableView, NSIndexPath indexPath, object item)
			{
				switch (indexPath.Row) {
				case 0:
					return mapCell;
				case 1:
					return titleCell;
				case 2:
					return valueCell;
				case 3:
					return descCell;
				default:
					return (SRDetailImageCell)tableView.DequeueReusableCell (SRDetailImageCell.Identifier);
				}
			}

			protected override object GetItemAt (NSIndexPath indexPath)
			{
				if (indexPath.Row > 3) {
					return ItemsSource.Cast<TileItemModel>().ToList()[indexPath.Row - 4];
				} else {
					return null;
				}
			}

			public override nfloat GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
			{
				switch (indexPath.Row) {
				case 0:
					return mapCell.CellHeight;
				case 1:
					return titleCell.CellHeight;
				case 2:
					return valueCell.CellHeight;
				case 3:
					return descCell.CellHeight;
				default:
					return UIScreen.MainScreen.Bounds.Width * 9 / 16;
					break;
				}

				return 0;
			}
		}
	}
}
