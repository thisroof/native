// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using MvvmCross.Binding.BindingContext;
using ThisRoofN.ViewModels;
using ThisRoofN.iOS.Helpers;
using CoreGraphics;

namespace ThisRoofN.iOS
{
	public partial class AffordSearchView : BaseViewController
	{
		public AffordSearchView (IntPtr handle) : base (handle)
		{
		}

		public AffordSearchViewModel ViewModelInstance
		{
			get {
				return (AffordSearchViewModel)this.ViewModel;
			}
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			SetupNavigationBar ();

			this.View.AddGestureRecognizer (new UITapGestureRecognizer (() => {
				this.View.EndEditing(true);
			}));

			var bindingSet = this.CreateBindingSet<AffordSearchView, AffordSearchViewModel> ();
			bindingSet.Bind (backButton).To (vm => vm.CloseCommand);
			bindingSet.Bind (settingButton).To (vm => vm.SettingCommand);
			bindingSet.Bind (txt_annualIncome).To (vm => vm.AnnualIncome);
			bindingSet.Bind (txt_monthlyDebts).To (vm => vm.MonthlyDebts);
			bindingSet.Bind (txt_downPayment).To (vm => vm.DownPayment);
			bindingSet.Bind (txt_propertyTax).To (vm => vm.PropertyTax);
			bindingSet.Bind (txt_insurance).To (vm => vm.PropertyInsurance);
			bindingSet.Bind (txt_hoaDues).To (vm => vm.HoaDues);
			bindingSet.Bind (btn_calc).To (vm => vm.CalcCommand);
			bindingSet.Apply ();

			view_annualIncome.Layer.BorderColor = TRColorHelper.ThemeBlue.CGColor;
			view_monthlyDebts.Layer.BorderColor = TRColorHelper.ThemeBlue.CGColor;
			view_downPayment.Layer.BorderColor = TRColorHelper.ThemeBlue.CGColor;

			view_propertyTax.Layer.BorderColor = TRColorHelper.ThemeBlue.CGColor;
			view_insurance.Layer.BorderColor = TRColorHelper.ThemeBlue.CGColor;
			view_hoaDues.Layer.BorderColor = TRColorHelper.ThemeBlue.CGColor;

			view_annualIncome.Layer.BorderWidth = 1.0f;
			view_monthlyDebts.Layer.BorderWidth = 1.0f;
			view_downPayment.Layer.BorderWidth = 1.0f;
			view_propertyTax.Layer.BorderWidth = 1.0f;
			view_insurance.Layer.BorderWidth = 1.0f;
			view_hoaDues.Layer.BorderWidth = 1.0f;

			view_annualIncome.Layer.CornerRadius = 3.0f;
			view_monthlyDebts.Layer.CornerRadius = 3.0f;
			view_downPayment.Layer.CornerRadius = 3.0f;
			view_propertyTax.Layer.CornerRadius = 3.0f;
			view_insurance.Layer.CornerRadius = 3.0f;
			view_hoaDues.Layer.CornerRadius = 3.0f;

			seg_loanTerm.SelectedSegment = ViewModelInstance.LoanTerm;
			seg_loanTerm.ValueChanged += (object sender, EventArgs e) => {
				ViewModelInstance.LoanTerm = (int)seg_loanTerm.SelectedSegment;
			};

			img_taxCheck.UserInteractionEnabled = true;
			img_taxCheck.Image = UIImage.FromBundle("icon_checkbox_emp");
			img_taxCheck.AddGestureRecognizer (new UITapGestureRecognizer (() => {
				if(ViewModelInstance.IncludeTax) {
					img_taxCheck.Image = UIImage.FromBundle("icon_checkbox_emp");
				} else {
					img_taxCheck.Image = UIImage.FromBundle("icon_checkbox_tick");
				}

				ViewModelInstance.IncludeTax = !ViewModelInstance.IncludeTax;
			}));
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			//Add Observer for keyboard event
			keyboardUpNotificationToken = NSNotificationCenter.DefaultCenter.AddObserver(UIKeyboard.DidShowNotification, KeyBoardUpScrollNotification);
			keyboardDownNotificationToken = NSNotificationCenter.DefaultCenter.AddObserver(UIKeyboard.WillHideNotification, KeyBoardDownScrollNotification);
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

			//Remove Observer
			if (keyboardUpNotificationToken != null)
				NSNotificationCenter.DefaultCenter.RemoveObserver(keyboardUpNotificationToken);
			if (keyboardDownNotificationToken != null)
				NSNotificationCenter.DefaultCenter.RemoveObserver(keyboardDownNotificationToken);
		}

		#region Keyboard Notification Part
		private void KeyBoardUpScrollNotification(NSNotification notification)
		{
			UIView activeView = null;

			if (txt_propertyTax.IsFirstResponder) {
				activeView = view_propertyTax;
			}

			if (txt_insurance.IsFirstResponder) {
				activeView = view_insurance;
			}

			if (txt_hoaDues.IsFirstResponder) {
				activeView = view_hoaDues;
			}

			//get the keyboard size
			CGRect r = UIKeyboard.BoundsFromNotification(notification);
			UIEdgeInsets contentInsets = new UIEdgeInsets (0.0f, 0.0f, r.Height, 0.0f);
			scroll_back.ContentInset = contentInsets;
			scroll_back.ScrollIndicatorInsets = contentInsets;

			CGRect aRect = scroll_back.Frame;
			aRect.Height -= r.Height;

			if (!aRect.Contains (new CGPoint (aRect.Left, aRect.Bottom))) {
				CGPoint scrollPoint = new CGPoint (0, activeView.Frame.Bottom - r.Height);
				scroll_back.SetContentOffset (scrollPoint, true);
			}
		}

		protected void KeyBoardDownScrollNotification(NSNotification notification)
		{
			UIEdgeInsets contentInsets = UIEdgeInsets.Zero;
			scroll_back.ContentInset = contentInsets;
			scroll_back.ScrollIndicatorInsets = contentInsets;
		}
		#endregion
	}
}
